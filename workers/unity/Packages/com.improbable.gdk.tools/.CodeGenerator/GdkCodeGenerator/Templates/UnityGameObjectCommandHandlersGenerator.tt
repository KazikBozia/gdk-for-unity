
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Improbable;
using Improbable.Gdk.Core;
using Improbable.Gdk.GameObjectRepresentation;
using Improbable.Worker.CInterop;
using Unity.Entities;
using UnityEngine;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
<# foreach(var commandDetails in commandDetailsList) {
       var rawRequestType = commandDetails.CommandName + ".ReceivedRequest";
       var responsePayloadType = commandDetails.FqnResponseType;
       var delegateList = commandDetails.CamelCaseCommandName + "Delegates";
#>
        public partial class <#= commandDetails.CommandName #>
        {
            public struct RequestResponder
            {
                private readonly EntityManager entityManager;
                private readonly Entity entity;
                public <#= rawRequestType #> Request { get; }

                internal RequestResponder(EntityManager entityManager, Entity entity, <#= rawRequestType #> request)
                {
                    this.entity = entity;
                    this.entityManager = entityManager;
                    Request = request;
                }

                public void SendResponse(<#= responsePayloadType #> payload)
                {
                    entityManager.GetComponentData<CommandResponders.<#= commandDetails.CommandName #>>(entity).ResponsesToSend
                        .Add(<#= commandDetails.CommandName #>.CreateResponse(Request, payload));
                }

                public void SendResponseFailure(string message)
                {
                    entityManager.GetComponentData<CommandResponders.<#= commandDetails.CommandName #>>(entity).ResponsesToSend
                        .Add(<#= commandDetails.CommandName #>.CreateResponseFailure(Request, message));
                }
            }
        }

<# } #>
        public partial class Requirable
        {
            [InjectableId(InjectableType.CommandRequestSender, <#= unityComponentDefinition.Id #>)]
            internal class CommandRequestSenderCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new CommandRequestSender(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.CommandRequestSender, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireNothing)]
            public class CommandRequestSender : RequirableBase, ICommandRequestSender
            {
                private Entity entity;
                private readonly EntityManager entityManager;
                private readonly ILogDispatcher logger;

                public CommandRequestSender(Entity entity, EntityManager entityManager, ILogDispatcher logger) : base(logger)
                {
                    this.entity = entity;
                    this.entityManager = entityManager;
                    this.logger = logger;
                }

<#
    foreach(var commandDetails in commandDetailsList) {
        var receivedResponseType = commandDetails.CommandName + ".ReceivedResponse";
#>
                public CommandTypeInformation<<#= commandDetails.CommandName #>, <#= commandDetails.FqnRequestType #>, <#= receivedResponseType #>> <#= commandDetails.CommandName #>TypeInformation;

                public long Send<#= commandDetails.CommandName #>Request(EntityId entityId, <#= commandDetails.FqnRequestType #> payload,
                    uint? timeoutMillis = null, bool allowShortCircuiting = false, object context = null)
                {
                    if (!IsValid())
                    {
                        return -1;
                    }

                    var ecsCommandRequestSender = entityManager.GetComponentData<CommandSenders.<#= commandDetails.CommandName #>>(entity);
                    var request = <#= commandDetails.CommandName #>.CreateRequest(entityId, payload, timeoutMillis, allowShortCircuiting, context);
                    ecsCommandRequestSender.RequestsToSend.Add(request);
                    return request.RequestId;
                }

                public long Send<#= commandDetails.CommandName #>Request(EntityId entityId, <#= commandDetails.FqnRequestType #> payload,
                    Action<<#= receivedResponseType #>> callback, uint? timeoutMillis = null, bool allowShortCircuiting = false)
                {
                    if (!IsValid())
                    {
                        return -1;
                    }

                    Action<<#= receivedResponseType #>> wrappedCallback = response =>
                    {
                        if (this.IsValid() && callback != null)
                        {
                            callback(response);
                        }
                    };

                    var ecsCommandRequestSender = entityManager.GetComponentData<CommandSenders.<#= commandDetails.CommandName #>>(entity);
                    var request = <#= commandDetails.CommandName #>.CreateRequest(entityId, payload, timeoutMillis, allowShortCircuiting, callback);
                    ecsCommandRequestSender.RequestsToSend.Add(request);
                    return request.RequestId;
                }

<# } #>
                long ICommandRequestSender.SendCommand<TCommand, TRequest, TResponse>(CommandTypeInformation<TCommand, TRequest, TResponse> commandTypeInformation, EntityId entityId, TRequest request,
                    Action<TResponse> callback, uint? timeoutMillis = null, bool allowShortCircuiting = false)
                {
<#
    foreach(var commandDetails in commandDetailsList) {
        var receivedResponseType = commandDetails.CommandName + ".ReceivedResponse";
#>
                    if (typeof(TCommand) == typeof(<#= commandDetails.CommandName #>))
                    {
                        if (callback != null && !(typeof(TResponse) == typeof(<#= receivedResponseType #>)))
                        {
                            throw new ArgumentException(
                                $"Callback for command {nameof(<#= commandDetails.CommandName #>)} must be an Action taking type {typeof(<#= receivedResponseType #>).FullName}");
                        }

                        // Can not directly cast to a struct and can not use unsafe code as the request type can not be constrained using unmanaged
                        switch (request)
                        {
                            case <#= commandDetails.FqnRequestType #> concreteRequest:
                            {
                                var concreteCallback = callback as Action<<#= receivedResponseType #>>;
                                return Send<#= commandDetails.CommandName #>Request(entityId, concreteRequest, concreteCallback, timeoutMillis,
                                    allowShortCircuiting);
                            }
                            default:
                                throw new ArgumentException(
                                    $"Request payload for command <#= commandDetails.CommandName #>, must be of type {nameof(<#= commandDetails.FqnRequestType #>)}");
                        }
                    }

<# } #>

                    throw new ArgumentException($"Can not send unknown command {typeof(TRequest)}");
                }
            }

            [InjectableId(InjectableType.CommandRequestHandler, <#= unityComponentDefinition.Id #>)]
            internal class CommandRequestHandlerCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new CommandRequestHandler(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.CommandRequestHandler, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireComponentWithAuthority)]
            public class CommandRequestHandler : RequirableBase
            {
                private Entity entity;
                private readonly EntityManager entityManager;
                private readonly ILogDispatcher logger;

                public CommandRequestHandler(Entity entity, EntityManager entityManager, ILogDispatcher logger) : base(logger)
                {
                    this.entity = entity;
                    this.entityManager = entityManager;
                    this.logger = logger;
                }
<# foreach(var commandDetails in commandDetailsList) {
           var delegateList = commandDetails.CamelCaseCommandName + "Delegates";
           var rawRequestType = commandDetails.CommandName + ".ReceivedRequest";
           var rawResponseType = commandDetails.CommandName + ".Response";
           var wrappedRequestType = commandDetails.CommandName + ".RequestResponder";
           var responsePayloadType = commandDetails.FqnResponseType;
#>
                private readonly List<Action<<#= wrappedRequestType #>>> <#= delegateList #> = new List<Action<<#= wrappedRequestType #>>>();
                public event Action<<#= wrappedRequestType #>> On<#= commandDetails.CommandName #>Request
                {
                    add
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= delegateList #>.Add(value);
                    }
                    remove
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= delegateList #>.Remove(value);
                    }
                }

                internal void On<#= commandDetails.CommandName #>RequestInternal(<#= rawRequestType #> request)
                {
                    GameObjectDelegates.DispatchWithErrorHandling(new <#= wrappedRequestType #>(entityManager, entity, request), <#= delegateList #>, logger);
                }
<# } #>
            }

            [InjectableId(InjectableType.CommandResponseHandler, <#= unityComponentDefinition.Id #>)]
            internal class CommandResponseHandlerCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new CommandResponseHandler(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.CommandResponseHandler, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireNothing)]
            public class CommandResponseHandler : RequirableBase
            {
                private Entity entity;
                private readonly EntityManager entityManager;
                private readonly ILogDispatcher logger;

                public CommandResponseHandler(Entity entity, EntityManager entityManager, ILogDispatcher logger) : base(logger)
                {
                    this.entity = entity;
                    this.entityManager = entityManager;
                    this.logger = logger;
                }
<# foreach(var commandDetails in commandDetailsList) {
   var commandResponseType = commandDetails.CommandName + ".ReceivedResponse";
   var delegateList = commandDetails.CamelCaseCommandName + "Delegates";
#>

                private readonly List<Action<<#= commandResponseType #>>> <#= delegateList #> = new List<Action<<#= commandResponseType #>>>();
                public event Action<<#= commandResponseType #>> On<#= commandDetails.CommandName #>Response
                {
                    add
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= delegateList #>.Add(value);
                    }
                    remove
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= delegateList #>.Remove(value);
                    }
                }

                internal void On<#= commandDetails.CommandName #>ResponseInternal(<#= commandResponseType #> response)
                {
                    GameObjectDelegates.DispatchWithErrorHandling(response, <#= delegateList #>, logger);
                }
<# } #>
            }
        }
    }
}
